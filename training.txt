#include <iostream>
using namespace std;
class chair{
public:
    chair(){
         cout << "chair constructor"  << endl;
    }
    ~chair(){
         cout << "chair destructor"  << endl;
    }
};
class table{
public:
    table(){
         cout << "table constructor"  << endl;
    }
    ~table(){
         cout << "table destructor"  << endl;
     }
     void setx(int x){
         m_x = x;
     }
     int getx() {
         return m_x;
     }
private:
    int m_x;
};
class training{
public:
    training(){
         cout << "training constructor"  << endl;
         m_table = new table;
         for(int i=0;i<10;i++){
            m_chair[i] = new chair;
         }
     }
     ~training(){
         cout << "training destructor"  << endl;
         delete m_table;
         /*for(int i=0;i<10;i++){
        delete m_chair[i];;
         }*/
         //delete *m_chair[];
    }
    void operator=(const training& rm){
        cout << "this operator overloading is called" << endl;
        int x = rm.m_table->getx();
        this-> m_table -> setx(x);
        //this->m_table->m_x = rm.m_table->m_x;
        cout << "address2 =" << this << endl;
    }
private :
     chair *m_chair[10];
     table *m_table;
};
int main() {
    cout << "welcome to training room" << endl;
    training room;
    //training room2;
    for(int i=0;i<1;i++){
        training room3;
        room = room3; //assignment,doing shallow copy
       //room.operator=(room3 );  
       cout << "address" << &room << endl;
    }
    //room = room2;
    cout << "I am done with program" << endl;
    //table t1;
    return 0;
}